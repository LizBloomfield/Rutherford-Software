# -*- coding: utf-8 -*-
"""
Created on Mon Jun 26 16:18:55 2023

@author: Currys
"""

import RPi.GPIO as GPIO
import time

#indicate whether we want to address the GPIOs via board numbers/via their GPIO number
#Since we want the latter, the command is:
GPIO.setmode(GPIO.BCM)

#define the pin as output:
GPIO.setup(23, GPIO.OUT)

#This command says a voltage of 3.3V (HIGH) or 0V (LOW) should be applied.
GPIO.output(23, GPIO.HIGH)
GPIO.output(23, GPIO.LOW)

#This turns the LED on and off 5 times, waiting for half a second in between.
for i in range(5):
    GPIO.output(23, GPIO.HIGH)
    time.sleep(0.5)
    GPIO.output(23, GPIO.LOW)
    time.sleep(0.5)

#the pin is defined as input:
GPIO.setup(24, GPIO.IN)

#Now we can query the status:
#either output 0 (if button not pressed) or 1 (if button pressed).
GPIO.input(24)

#extend the program as follows, LED is always on when the button is pressed.

# Infinite loop
while True:
    if GPIO.input(24) == 0:
        # Turn off
        GPIO.output(23, GPIO.LOW)
    else:
        # Turn on
        GPIO.output(23, GPIO.HIGH)

#i2c output for GPIO

#You can verify the address of connected I2C peripherals with a simple one-liner:
sudo apt-get install i2c-tools
sudo i2cdetect -y 1

#You can then access I2C from Python using the smbus library:
import smbus
DEVICE_BUS = 1
DEVICE_ADDR = 0x15
bus = smbus.SMBus(DEVICE_BUS)
bus.write_byte_data(DEVICE_ADDR, 0x00, 0x01)
#GPIO 0 and GPIO 1 - I2C0 - can be used as an alternate I2C bus, but are typically used by the system to read the HAT EEPROM.

#To take readings from sensors:
# 1. Import the gpiozero library for Python
# 2. Read from the connected sensor (directly, or by using SPI or I2C)
# 3. Store the data (see below)

#i found some simple code for a small photocell. 
#aka resistor that changes resistance based on how bright the light is
# see if we can test this with one of our sillicon detectors tomorrow. 

#simple resistor code:
import time
import board
from digitalio import DigitalInOut, Direction

RCpin = board.D18

while True:
    with DigitalInOut(RCpin) as rc:
        reading = 0

        # setup pin as output and direction low value
        rc.direction = Direction.OUTPUT
        rc.value = False

        time.sleep(0.1)

        # setup pin as input and wait for low value
        rc.direction = Direction.INPUT

        # This takes about 1 millisecond per loop cycle
        while rc.value is False:
            reading += 1
        print(reading)

#another code to try
#uses an LDR and breadboard but can see if we can tweak it
import RPi.GPIO as GPIO
import time

GPIO.setmode(GPIO.BOARD)

#define the pin that goes to the circuit
pin_to_circuit = 7

def rc_time (pin_to_circuit):
    count = 0
  
    #Output on the pin for 
    GPIO.setup(pin_to_circuit, GPIO.OUT)
    GPIO.output(pin_to_circuit, GPIO.LOW)
    time.sleep(0.1)

    #Change the pin back to input
    GPIO.setup(pin_to_circuit, GPIO.IN)
  
    #Count until the pin goes high
    while (GPIO.input(pin_to_circuit) == GPIO.LOW):
        count += 1

    return count

#Catch when script is interrupted, cleanup correctly
try:
    # Main loop
    while True:
        print(rc_time(pin_to_circuit))
except KeyboardInterrupt:
    pass
finally:
    GPIO.cleanup()


#chatgpt code for inputting data

import RPi.GPIO as GPIO
import time
import matplotlib.pyplot as plt

# GPIO pin connected to the sensor
sensor_pin = 17

# Set up GPIO
GPIO.setmode(GPIO.BCM)
GPIO.setup(sensor_pin, GPIO.IN)

# Initialize an empty list to store the sensor readings
data = []

# Create an initial empty histogram
fig, ax = plt.subplots()
n, bins, patches = ax.hist([], bins=10)

# Function to update the histogram with new data
def update_histogram(data):
    # Clear the previous histogram
    ax.cla()
    
    # Create a new histogram with the updated data
    n, bins, patches = ax.hist(data, bins=10)
    
    # Set labels and title
    ax.set_xlabel('Value')
    ax.set_ylabel('Frequency')
    ax.set_title('Real-time Histogram')
    
    # Refresh the plot
    plt.draw()
    plt.pause(0.001)

# Example usage: continuously read sensor data and update the histogram
while True:
    # Read the sensor value
    sensor_value = GPIO.input(sensor_pin)
    
    # Append the sensor value to the data list
    data.append(sensor_value)
    
    # Update the histogram
    update_histogram(data)
    
    # Pause for a short duration
    time.sleep(0.1)
#Make sure you have the RPi.GPIO library installed on your Raspberry Pi. 
#If it's not already installed, you can install it by running pip install RPi.GPIO in the terminal on your Raspberry Pi.
#Also, ensure that you have the necessary privileges to access the GPIO pins on the Raspberry Pi. 
#You may need to run the code as a privileged user or add your user to the gpio group 
#using the sudo adduser <username> gpio command, replacing <username> with your actual username.
